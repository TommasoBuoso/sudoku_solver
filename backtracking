def backtracking(riga, x, y, bohZ, bohR, bohC, ris):
    if x == 0 and y == 9:
        return True
    else:
        if x == 9:
            return backtracking(riga, 0, y + 1, (bohZ), (bohR), (bohC), ris)
        else:
            if isinstance(riga[y][x], int):
                bohR[y].append(riga[y][x])
                bohC[x].append(riga[y][x])
                bohZ[(3 * (y // 3)) + (x // 3)].append(riga[y][x])
                k = backtracking(riga, x + 1, y, (bohZ), (bohR), (bohC), ris)
                if k == False:
                    bohR[y].pop()
                    bohC[x].pop()
                    bohZ[(3 * (y // 3)) + (x // 3)].pop()
                return k
            else:
                for i in riga[y][x]:
                    if (i not in bohZ[(3 * (y // 3)) + (x // 3)]) and (i not in bohR[y]) and (i not in bohC[x]):
                        bohR[y].append(i)
                        bohC[x].append(i)
                        bohZ[(3 * (y // 3)) + (x // 3)].append(i)
                        if backtracking(riga, x + 1, y, (bohZ), (bohR), (bohC), ris):
                            ris[y][x] = i
                            return True
                        bohR[y].pop()
                        bohC[x].pop()
                        bohZ[(3 * (y // 3)) + (x // 3)].pop()
                return False


def define_ris(board):
    ris = [[0 for y in range(9)]
           for _ in range(9)]
    for i in range(9):
        for j in range(9):
            if isinstance(board[i][j], int):
                ris[i][j] = board[i][j]
    return ris
